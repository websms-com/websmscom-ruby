#
# This code was generated by Enunciate.
# http://enunciate.codehaus.org/
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module At

module Sms

module Business

module Api

module Domain

  # 
  class Response 

    # the statusMessage
    attr_accessor :statusMessage
    # The error code or zero if their was no error
    attr_accessor :statusCode

    # the json hash for this Response
    def to_jaxb_json_hash
      _h = {}
      _h['statusMessage'] = statusMessage.to_jaxb_json_hash unless statusMessage.nil?
      _h['statusCode'] = statusCode.to_jaxb_json_hash unless statusCode.nil?
      return _h
    end

    # the json (string form) for this Response
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Response with a json hash
    def init_jaxb_json_hash(_o)
      @statusMessage = String.from_json(_o['statusMessage']) unless _o['statusMessage'].nil?
      @statusCode = Fixnum.from_json(_o['statusCode']) unless _o['statusCode'].nil?
    end

    # constructs a Response from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class DeliveryInfoList 

    # the deliveryInfo
    attr_accessor :deliveryInfo
    # the resourceURL
    attr_accessor :resourceURL

    # the json hash for this DeliveryInfoList
    def to_jaxb_json_hash
      _h = {}
      if !deliveryInfo.nil?
        _ha = Array.new
        deliveryInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deliveryInfo'] = _ha
      end
      _h['resourceURL'] = resourceURL.to_jaxb_json_hash unless resourceURL.nil?
      return _h
    end

    # the json (string form) for this DeliveryInfoList
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeliveryInfoList with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['deliveryInfo'].nil?
        @deliveryInfo = Array.new
        _oa = _o['deliveryInfo']
        _oa.each { | _item | @deliveryInfo.push At::Sms::Business::Api::Domain::Sms::Oneapi::DeliveryInfo.from_json(_item) }
      end
      @resourceURL = String.from_json(_o['resourceURL']) unless _o['resourceURL'].nil?
    end

    # constructs a DeliveryInfoList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class ReceiptRequest 

    # the notifyURL
    attr_accessor :notifyURL
    # the callbackData
    attr_accessor :callbackData

    # the json hash for this ReceiptRequest
    def to_jaxb_json_hash
      _h = {}
      _h['notifyURL'] = notifyURL.to_jaxb_json_hash unless notifyURL.nil?
      _h['callbackData'] = callbackData.to_jaxb_json_hash unless callbackData.nil?
      return _h
    end

    # the json (string form) for this ReceiptRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ReceiptRequest with a json hash
    def init_jaxb_json_hash(_o)
      @notifyURL = String.from_json(_o['notifyURL']) unless _o['notifyURL'].nil?
      @callbackData = String.from_json(_o['callbackData']) unless _o['callbackData'].nil?
    end

    # constructs a ReceiptRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class OutboundSMSTextMessage 

    # the message
    # Messages over 160 characters may end up being sent as two or more messages
    attr_accessor :message

    # the json hash for this OutboundSMSTextMessage
    def to_jaxb_json_hash
      _h = {}
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this OutboundSMSTextMessage
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OutboundSMSTextMessage with a json hash
    def init_jaxb_json_hash(_o)
      @message = String.from_json(_o['message']) unless _o['message'].nil?
    end

    # constructs a OutboundSMSTextMessage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class OutboundSMSMessageRequest 

    # the address
    attr_accessor :address
    # the deliveryInfoList
    attr_accessor :deliveryInfoList
    # the senderAddress
    attr_accessor :senderAddress
    # the outboundSMSTextMessage
    attr_accessor :outboundSMSTextMessage
    # the clientCorrelator
    attr_accessor :clientCorrelator
    # the receiptRequest
    attr_accessor :receiptRequest
    # the senderName
    attr_accessor :senderName
    # the resourceURL
    attr_accessor :resourceURL

    # the json hash for this OutboundSMSMessageRequest
    def to_jaxb_json_hash
      _h = {}
      if !address.nil?
        _ha = Array.new
        address.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['address'] = _ha
      end
      _h['deliveryInfoList'] = deliveryInfoList.to_jaxb_json_hash unless deliveryInfoList.nil?
      _h['senderAddress'] = senderAddress.to_jaxb_json_hash unless senderAddress.nil?
      _h['outboundSMSTextMessage'] = outboundSMSTextMessage.to_jaxb_json_hash unless outboundSMSTextMessage.nil?
      _h['clientCorrelator'] = clientCorrelator.to_jaxb_json_hash unless clientCorrelator.nil?
      _h['receiptRequest'] = receiptRequest.to_jaxb_json_hash unless receiptRequest.nil?
      _h['senderName'] = senderName.to_jaxb_json_hash unless senderName.nil?
      _h['resourceURL'] = resourceURL.to_jaxb_json_hash unless resourceURL.nil?
      return _h
    end

    # the json (string form) for this OutboundSMSMessageRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OutboundSMSMessageRequest with a json hash
    def init_jaxb_json_hash(_o)
      if !_o['address'].nil?
        @address = Array.new
        _oa = _o['address']
        _oa.each { | _item | @address.push String.from_json(_item) }
      end
      @deliveryInfoList = At::Sms::Business::Api::Domain::Sms::Oneapi::DeliveryInfoList.from_json(_o['deliveryInfoList']) unless _o['deliveryInfoList'].nil?
      @senderAddress = String.from_json(_o['senderAddress']) unless _o['senderAddress'].nil?
      @outboundSMSTextMessage = At::Sms::Business::Api::Domain::Sms::Oneapi::OutboundSMSTextMessage.from_json(_o['outboundSMSTextMessage']) unless _o['outboundSMSTextMessage'].nil?
      @clientCorrelator = String.from_json(_o['clientCorrelator']) unless _o['clientCorrelator'].nil?
      @receiptRequest = At::Sms::Business::Api::Domain::Sms::Oneapi::ReceiptRequest.from_json(_o['receiptRequest']) unless _o['receiptRequest'].nil?
      @senderName = String.from_json(_o['senderName']) unless _o['senderName'].nil?
      @resourceURL = String.from_json(_o['resourceURL']) unless _o['resourceURL'].nil?
    end

    # constructs a OutboundSMSMessageRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class DeliveryInfo 

    # the address
    attr_accessor :address
    # the deliveryStatus
    attr_accessor :deliveryStatus

    # the json hash for this DeliveryInfo
    def to_jaxb_json_hash
      _h = {}
      _h['address'] = address.to_jaxb_json_hash unless address.nil?
      _h['deliveryStatus'] = deliveryStatus.to_jaxb_json_hash unless deliveryStatus.nil?
      return _h
    end

    # the json (string form) for this DeliveryInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeliveryInfo with a json hash
    def init_jaxb_json_hash(_o)
      @address = String.from_json(_o['address']) unless _o['address'].nil?
      @deliveryStatus = String.from_json(_o['deliveryStatus']) unless _o['deliveryStatus'].nil?
    end

    # constructs a DeliveryInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class SMSMessageRequest 

    # the outboundSMSMessageRequest
    attr_accessor :outboundSMSMessageRequest

    # the json hash for this SMSMessageRequest
    def to_jaxb_json_hash
      _h = {}
      _h['outboundSMSMessageRequest'] = outboundSMSMessageRequest.to_jaxb_json_hash unless outboundSMSMessageRequest.nil?
      return _h
    end

    # the json (string form) for this SMSMessageRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SMSMessageRequest with a json hash
    def init_jaxb_json_hash(_o)
      @outboundSMSMessageRequest = At::Sms::Business::Api::Domain::Sms::Oneapi::OutboundSMSMessageRequest.from_json(_o['outboundSMSMessageRequest']) unless _o['outboundSMSMessageRequest'].nil?
    end

    # constructs a SMSMessageRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

  # 
  class Request 

    # 
    attr_accessor :apiKey

    # the json hash for this Request
    def to_jaxb_json_hash
      _h = {}
      _h['apiKey'] = apiKey.to_jaxb_json_hash unless apiKey.nil?
      return _h
    end

    # the json (string form) for this Request
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Request with a json hash
    def init_jaxb_json_hash(_o)
      @apiKey = String.from_json(_o['apiKey']) unless _o['apiKey'].nil?
    end

    # constructs a Request from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

module Oneapi

  # 
  class DeliveryStatus

    # (no documentation provided)
    DeliveredToTerminal = "DeliveredToTerminal"

    # (no documentation provided)
    DeliveryUncertain = "DeliveryUncertain"

    # (no documentation provided)
    DeliveryImpossible = "DeliveryImpossible"

    # (no documentation provided)
    MessageWaiting = "MessageWaiting"

    # (no documentation provided)
    DeliveredToNetwork = "DeliveredToNetwork"
  end

end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

  # 
  class SmsSendResponse < At::Sms::Business::Api::Domain::Response 

    # the clientMessageId
    # 
    # the client side ID if provided upon request
    attr_accessor :clientMessageId
    # the transferId
    # 
    # the server side ID for this request
    attr_accessor :transferId

    # the json hash for this SmsSendResponse
    def to_jaxb_json_hash
      _h = super
      _h['clientMessageId'] = clientMessageId.to_jaxb_json_hash unless clientMessageId.nil?
      _h['transferId'] = transferId.to_jaxb_json_hash unless transferId.nil?
      return _h
    end

    #initializes this SmsSendResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @clientMessageId = String.from_json(_o['clientMessageId']) unless _o['clientMessageId'].nil?
      @transferId = String.from_json(_o['transferId']) unless _o['transferId'].nil?
    end

    # constructs a SmsSendResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

  # 
  class SenderAddressType

    # (no documentation provided)
    National = "national"

    # (no documentation provided)
    International = "international"

    # (no documentation provided)
    Alphanumeric = "alphanumeric"

    # (no documentation provided)
    Shortcode = "shortcode"
  end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

  # 
  class AuthRequest < At::Sms::Business::Api::Domain::Request 

    # The authentication token returned by the user login request
    attr_accessor :authToken

    # the json hash for this AuthRequest
    def to_jaxb_json_hash
      _h = super
      _h['authToken'] = authToken.to_jaxb_json_hash unless authToken.nil?
      return _h
    end

    #initializes this AuthRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @authToken = String.from_json(_o['authToken']) unless _o['authToken'].nil?
    end

    # constructs a AuthRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

  # 
  class SmsSendRequest < At::Sms::Business::Api::Domain::AuthRequest 

    # the test
    attr_accessor :test
    # the recipientAddress in international format (436761234567)
    attr_accessor :recipientAddressList
    # the senderAddress
    attr_accessor :senderAddress
    # the senderAddressType
    # 
    # usually the type of sender address is obtained automatically. if
    # unsure sender address type can be set
    attr_accessor :senderAddressType
    # the sendAsFlashSms
    attr_accessor :sendAsFlashSms
    # the notificationCallbackUrl
    # 
    # if set, the request will be sent with status report notification
    # and the notification will be returned to this url
    attr_accessor :notificationCallbackUrl
    # the clientMessageId
    # 
    # optional client side message ID. if set, it must be unique across
    # requests, otherwise the request will be rejected
    attr_accessor :clientMessageId
    # the message priority
    attr_accessor :priority

    # the json hash for this SmsSendRequest
    def to_jaxb_json_hash
      _h = super
      _h['test'] = test.to_jaxb_json_hash unless test.nil?
      if !recipientAddressList.nil?
        _ha = Array.new
        recipientAddressList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['recipientAddressList'] = _ha
      end
      _h['senderAddress'] = senderAddress.to_jaxb_json_hash unless senderAddress.nil?
      _h['senderAddressType'] = senderAddressType.to_jaxb_json_hash unless senderAddressType.nil?
      _h['sendAsFlashSms'] = sendAsFlashSms.to_jaxb_json_hash unless sendAsFlashSms.nil?
      _h['notificationCallbackUrl'] = notificationCallbackUrl.to_jaxb_json_hash unless notificationCallbackUrl.nil?
      _h['clientMessageId'] = clientMessageId.to_jaxb_json_hash unless clientMessageId.nil?
      _h['priority'] = priority.to_jaxb_json_hash unless priority.nil?
      return _h
    end

    #initializes this SmsSendRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @test = Boolean.from_json(_o['test']) unless _o['test'].nil?
      if !_o['recipientAddressList'].nil?
        @recipientAddressList = Array.new
        _oa = _o['recipientAddressList']
        _oa.each { | _item | @recipientAddressList.push Bignum.from_json(_item) }
      end
      @senderAddress = String.from_json(_o['senderAddress']) unless _o['senderAddress'].nil?
      @senderAddressType = String.from_json(_o['senderAddressType']) unless _o['senderAddressType'].nil?
      @sendAsFlashSms = Boolean.from_json(_o['sendAsFlashSms']) unless _o['sendAsFlashSms'].nil?
      @notificationCallbackUrl = String.from_json(_o['notificationCallbackUrl']) unless _o['notificationCallbackUrl'].nil?
      @clientMessageId = String.from_json(_o['clientMessageId']) unless _o['clientMessageId'].nil?
      @priority = Fixnum.from_json(_o['priority']) unless _o['priority'].nil?
    end

    # constructs a SmsSendRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

  # 
  class TextSmsSendRequest < At::Sms::Business::Api::Domain::Sms::SmsSendRequest 

    # the messageContent
    attr_accessor :messageContent
    # the maxSmsPerMessage
    # 
    # optional limit for auto segmentation if message exceeds 160 gsm or 70 ucs2 chars, defaults to 1
    attr_accessor :maxSmsPerMessage

    # the json hash for this TextSmsSendRequest
    def to_jaxb_json_hash
      _h = super
      _h['messageContent'] = messageContent.to_jaxb_json_hash unless messageContent.nil?
      _h['maxSmsPerMessage'] = maxSmsPerMessage.to_jaxb_json_hash unless maxSmsPerMessage.nil?
      return _h
    end

    #initializes this TextSmsSendRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @messageContent = String.from_json(_o['messageContent']) unless _o['messageContent'].nil?
      @maxSmsPerMessage = Fixnum.from_json(_o['maxSmsPerMessage']) unless _o['maxSmsPerMessage'].nil?
    end

    # constructs a TextSmsSendRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module At

module Sms

module Business

module Api

module Domain

module Sms

  # 
  class BinarySmsSendRequest < At::Sms::Business::Api::Domain::Sms::SmsSendRequest 

    # the userDataHeaderPresent
    attr_accessor :userDataHeaderPresent
    # the messageContent
    attr_accessor :messageContent

    # the json hash for this BinarySmsSendRequest
    def to_jaxb_json_hash
      _h = super
      _h['userDataHeaderPresent'] = userDataHeaderPresent.to_jaxb_json_hash unless userDataHeaderPresent.nil?
      if !messageContent.nil?
        _ha = Array.new
        messageContent.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['messageContent'] = _ha
      end
      return _h
    end

    #initializes this BinarySmsSendRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @userDataHeaderPresent = Boolean.from_json(_o['userDataHeaderPresent']) unless _o['userDataHeaderPresent'].nil?
      if !_o['messageContent'].nil?
        @messageContent = Array.new
        _oa = _o['messageContent']
        _oa.each { | _item | @messageContent.push String.from_json(_item) }
      end
    end

    # constructs a BinarySmsSendRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end
